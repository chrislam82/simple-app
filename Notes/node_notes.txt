##########################################################
#                       Node / Express                   #
##########################################################

##############################
#              Node          #
##############################
node.js is basically runtime envJS. It runs on the V8 Javascript Engine which compiles JS into machine code. We often use its CLI
    node.js is like using Python3 (but not really)
    npm is like using pip3
- use npm to get packages from online which are installed in node_modules folder locally so that things can run on localhost without any internet access

##############################
#    Node multi-threading    #
##############################
In js, single threaded so code execution is never interrupted in an event loop unless it is async
- Async, E.g. I/O or timer operaitons, then may/will switch during I/O so not safe

Multi-threading in node.js
- node.js has 2 types of threads (event loop (the main callback) thread, and worker pool (worker threads)).
- NOTE: It also may have ability to spawn normal child threads but ill see (I think thats the same as a worker thread; thread under teh callback thread rather than an entire new thread for the I/O. Prob just different name used elsewhere)
- "Node.js being designed without threads doesn't mean you can't take advantage of multiple cores in your environment. Child processes can be spawned by using our child_process.fork() API, and are designed to be easy to communicate with. Built upon that same interface is the cluster module, which allows you to share sockets between processes to enable load balancing over your cores."
- Since node.js uses the v8 JS engine, it is still single-threaded mainly with async and non-blocking properties. However, if any computationally intensive tasks are required, node.js can split off worker threads that are less efficient than then main callback-driven thread to complete the computations and then return the results (using some inbuilt C library?)
- Only works on non-IO intensive tasks, since IO still handled by the main callback thread. the callback thread still handles all callbacks and worker threads simply perform computation before returning results to callback thread

Instead of forking for each request, Node uses JS callbacks to manage multiple requests, spawning threads only if there are blocking I/O that is causing throughput issues; Node is non-blocking, and asynchronous

##################################
# Import (ES module vs CommonJS) #
##################################
# Require vs Import / ES module vs CommonJS

require()
- require is a keyword in node.js that allows loading of modules
- Modules are a way to split an application into separate files instead of having all of your application in one file. This concept is also present in other languages with minor differences in syntax and behavior, like C's include, Python's import, and so on.
- In Node.js, each module has its own scope. A module cannot directly access things defined in another module unless it chooses to expose them. To expose things from a module, they must be assigned to exports or module.exports. For a module to access another module's exports or module.exports, it must use require().

- Basically node.js has a few modules built in fore core functionality, npm allows us to import in other modules to use

ES modules are the standard for JavaScript, while CommonJS is the default in Node.js
- CommonJS uses require() and modules.export
- ES modules use import/export
- NodeJS treats .js as commonJS modules by default. To use ES module syntax, use either:
  - .mjs extension
  - type: "module" in package.json
  - or a transpiler like Babel

##############################
#           Express          #
##############################
Express
- minimalist node.js web application framework
- module allows setup of simple http server

##########################################################
#                       Other notes                      #
##########################################################

##############################
#   fs Read/Write & locking  #
##############################
reading file
	fs.readFile() is async and returns a Promise so potential for locking required to prevent concurrency issues

	https://nodejs.org/api/fs.html#performance-considerations
	"The fs.readFile() method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk. This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory."

  - Basically, need to lock files since buffering and switches means potential changes between read/write

fs.writeFile()
	If using a fd, it will write to whereever fd is pointing to. So if fd is at end of file, writing to fd will append to end of file
	If using a filname, it will replace the original file

"The callback APIs use the underlying Node.js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur."
	threadpool are the worker threads that arent the main event loop, working on the side
	generally not good to take up too many of the workerthreads even though they are working on the side

##############################
#   Other things to look at  #
##############################
View Engine: related res.rerender() -> I think can use like Jinja for rendering html for return
next() (Related to routing in Express. Also, look at routing itself in express and how it works)
app.use() -> acts as middleware that runs everytime regardless of the route
app.route() -> can create route specific routing. E.g.
  app.route()
  .use() // Add middleware specific to route rather than to entire app
  .get() // get route
  .post() // post route

what does event loop turning mean?
